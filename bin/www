#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app')
var structures = require('../structures')
var debug = require('debug')('yeonit:server')
var http = require('http')
var socket = require('socket.io')
var fs = require('fs')
var path = require('path')
var uglifyjs = require('uglify-es')
var crass = require('crass')

/**
 * Merge all stylesheets and javascripts into one file.
 */

var public = path.join(__dirname, '..', 'public')
var staticsMerged = {
  javascripts: path.join(public, 'javascripts', 'scripts.js'),
  stylesheets: path.join(public, 'stylesheets', 'styles.css')
}

function makefile(files) {
  files.forEach(function (file) {
    if (!fs.existsSync(file)) {
      console.log(file + ' was crated')
    }

    fs.writeFileSync(file, '', 'utf8')
  })
}
function digger(dir) {
  console.log('Looking for ' + dir)

  fs.readdirSync(dir).forEach(function (stack) {
    stackpath = path.join(dir, stack)

    if (fs.existsSync(stackpath) && fs.lstatSync(stackpath).isDirectory()) {
      digger(stackpath)
    } else {
      if (stackpath.endsWith('.css')) {
        console.log(stackpath + ' is being merged')
        fs.writeFileSync(staticsMerged.stylesheets, fs.readFileSync(staticsMerged.stylesheets) + ('/* ' + stack + ' */\n' + crass.parse(fs.readFileSync(stackpath)).toString() + '\n'), 'utf8')
      } else if (stackpath.endsWith('.js')) {
        console.log(stackpath + ' is being merged')
        fs.writeFileSync(staticsMerged.javascripts, fs.readFileSync(staticsMerged.javascripts) + ('/* ' + stack + ' */\n' + (uglifyjs.minify(fs.readFileSync(stackpath)).code || '') + '\n'), 'utf8')
      }
    }
  })
}

makefile(Object.values(staticsMerged))
digger(public)

console.log('All statics were merged')

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3006')
app.set('port', port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)
var io = socket(server)

/**
 * Listen on provided port, on all network interfaces.
 */

structures.socket.applicate(io)
server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address()
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
